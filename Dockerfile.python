# Use official Python image
FROM python:3.11-slim-bullseye

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    VENV_PATH="/opt/venv" \
    PATH="/opt/venv/bin:$PATH" \
    KAFKA_BOOTSTRAP_SERVERS="kafka.argo.svc.cluster.local:9092" \
    GCS_BUCKET_NAME="prediction-data-pipe" \
    GCS_FILE_PATTERN="prediction_\\d{8}_\\d{6}\\.csv$"

# Install system dependencies and create virtual environment
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libsnappy-dev \
    gcc \
    python3-dev \
    bash && \
    python -m venv $VENV_PATH && \
    rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements first to leverage Docker cache
COPY requirements_new.txt .

# Install Python dependencies in venv
RUN $VENV_PATH/bin/pip install --no-cache-dir -r requirements_new.txt && \
    find $VENV_PATH -type f -name '*.pyc' -delete && \
    find $VENV_PATH -type d -name '__pycache__' -delete

# Copy application code
COPY . .

# Clean application pyc files
RUN find /app -type f -name '*.pyc' -delete && \
    find /app -type d -name '__pycache__' -delete

# Fix line endings and permissions for entrypoint
RUN sed -i 's/\r$//' kafka_entrypoint.sh && \
    chmod +x kafka_entrypoint.sh

# Create non-root user and assign ownership
RUN useradd -m appuser && \
    chown -R appuser:appuser /app
USER appuser

# Set entrypoint
ENTRYPOINT ["/bin/bash", "/app/kafka_entrypoint.sh"]
