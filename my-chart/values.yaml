replicaCount: 0

image:
  repository: mypyspark
  tag: latest
  pullPolicy: IfNotPresent

sqlserver:
  host:
    secretName: "db-secrets"
    secretKey: "host"  
  port:
    secretName: "db-secrets"
    secretKey: "port"  
  database:
    secretName: "db-secrets"
    secretKey: "database" 
  username:
    secretName: "db-secrets"
    secretKey: "username" 
  password:
    secretName: "db-secrets"
    secretKey: "password" 
  table:
    secretName: "db-secrets"
    secretKey: "table" 

mongodb:
  enabled: true
  auth:
    enabled: false
  architecture: standalone
  replicaCount: 1
  persistence:
    enabled: true
    size: 512Mi  
  resources:
    requests:
      cpu: "100m"    # Matches actual 56m usage + buffer
      memory: "256Mi" # Matches actual 314Mi usage
    limits:
      cpu: "300m"     # Allows bursts
      memory: "512Mi" # Safety limit
  service:
    type: ClusterIP
    port: 27017
  connectionUri:
    secretName: "db-secrets"
    secretKey: "mongodb"

service:
  type: ClusterIP
  port: 80
  targetPort: 5000

serviceAccount:
  create: true  
  name: "spark"

rbac:
  create: true
  roleName: "spark-cluster-role" 
  roleBindingName: "spark-rolebinding"
  namespace: "argo"  

ingress:
  enabled: false

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

resources:
  requests:
    cpu: "2"       # Leave some CPU for system/MongoDB
    memory: "16Gi" # Leave 6GB for system/MongoDB
  limits:
    cpu: "4"       # Still allow bursting
    memory: "20Gi"
    
pipelines:
  - name: ingestion
    script: "ingestion_pipeline.py"
    dependencies: []
  - name: validation
    script: "validation_pipeline.py"
    dependencies: ["ingestion"]
  - name: transformation
    script: "transformation_pipeline.py"
    dependencies: ["validation"]
  - name: training
    script: "training_pipeline.py"
    dependencies: ["transformation"]
  - name: evaluation
    script: "evaluation_pipeline.py"
    dependencies: ["training"]
  - name: pusher
    script: "pusher_pipeline.py"
    dependencies: ["evaluation"]
  - name: file_watcher
    script: "file_watcher.py"
    dependencies: []

job:
  restartPolicy: Never
  ttlSecondsAfterFinished: 3600

tolerations: []
nodeSelector: {}
affinity: {}

config:
  enabled: true

workflow:
  enabled: true


