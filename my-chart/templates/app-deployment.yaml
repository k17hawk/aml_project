apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-python-app
  template:
    metadata:
      labels:
        app: my-python-app
    spec:
      serviceAccountName: spark #added for role and service account of spark
      containers:
        - name: my-python-app
          image: mypyspark:latest
          imagePullPolicy: Never
          ports:
            - containerPort: 5000
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: JAVA_HOME
              value: "/usr/lib/jvm/java-17-openjdk-amd64"
            - name: HADOOP_VERSION
              value: "3.3.6"
            - name: SPARK_VERSION
              value: "3.5.5"
            - name: SPARK_HOME
              value: "/opt/spark"
            - name: MONGO_DB_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.connectionUri.secretName }}
                  key: {{ .Values.mongodb.connectionUri.secretKey }}
            # ODBC Connection Details
            - name: SQL_SERVER_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sqlserver.host.secretName }}
                  key: {{ .Values.sqlserver.host.secretKey }}
            - name: SQL_SERVER_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sqlserver.port.secretName }}
                  key: {{ .Values.sqlserver.port.secretKey }}
            - name: SQL_SERVER_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sqlserver.database.secretName }}
                  key: {{ .Values.sqlserver.database.secretKey }}
            - name: SQL_SERVER_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sqlserver.username.secretName }}
                  key: {{ .Values.sqlserver.username.secretKey }}
            - name: SQL_SERVER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sqlserver.password.secretName }}
                  key: {{ .Values.sqlserver.password.secretKey }}
            - name: SQL_SERVER_TABLE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.sqlserver.table.secretName }}
                  key: {{ .Values.sqlserver.table.secretKey }}

            - name: STARTUP_COMMAND  # Fetch startup command from ConfigMap
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: startup-command
          volumeMounts:
            - name: app-storage
              mountPath: /app/artifact  # Path to store artifacts
            - name: config-volume
              mountPath: /app/config  # Path to store configuration files
          command: ["/bin/sh", "-c"]
          args: ["$(STARTUP_COMMAND)"]  # Run install + start app dynamically from ConfigMap
      volumes:
        - name: app-storage
          persistentVolumeClaim:
            claimName: app-pvc  # Ensure this PVC exists
        - name: config-volume
          configMap:
            name: app-config
      