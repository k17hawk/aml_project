apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-prediction-app
  namespace: argo
  labels:
    app: my-prediction-app
spec:
  serviceName: my-prediction-app-headless
  replicas: 1
  selector:
    matchLabels:
      app: my-prediction-app
  template:
    metadata:
      labels:
        app: my-prediction-app
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      containers:
        - name: my-prediction-app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Never
          ports:
            - containerPort: 4040
              name: spark-ui-pred
            - containerPort: 7078
              name: spark-pred
            - containerPort: 5000
              name: flask-ui-pred
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 4040
            initialDelaySeconds: 20
            periodSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 4040
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
            - name: PYSPARK_PYTHON
              value: /opt/venv/bin/python
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: JAVA_HOME
              value: "/opt/java/openjdk"
            - name: HADOOP_HOME
              value: "/opt/hadoop"
            - name: HADOOP_CONF_DIR
              value: "/opt/hadoop/etc/hadoop"
            - name: SPARK_HOME
              value: "/opt/spark"
            - name: SPARK_LOCAL_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STARTUP_COMMAND
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: startup-command
            - name: MONGO_DB_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.connectionUri.secretName }}
                  key: {{ .Values.mongodb.connectionUri.secretKey }}
            - name: SPARK_DRIVER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SPARK_DRIVER_PORT
              value: "29413"
            - name: SPARK_UI_PORT
              value: "4040"
            - name: SPARK_MASTER
              value: "local[2]"
            - name: SPARK_APP_NAME
              value: "my-prediction-app"
            - name: SPARK_K8S_IMAGE
              value: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            - name: SPARK_K8S_NAMESPACE
              value: "default"
            - name: SPARK_K8S_SERVICE_ACCOUNT
              value: "{{ .Values.serviceAccount.name }}"
            - name: SPARK_K8S_BATCH_DELAY
              value: "5s"
            - name: SPARK_EXECUTOR_MEMORY
              value: "1g"
            - name: SPARK_DRIVER_MEMORY
              value: "1g"
            - name: SPARK_MEMORY_FRACTION
              value: "0.75"
            - name: SPARK_STORAGE_FRACTION
              value: "0.3"
            - name: SPARK_SHUFFLE_PARTITIONS
              value: "2"
            - name: SPARK_DEFAULT_PARALLELISM
              value: "2"
            - name: SPARK_SERIALIZER
              value: "org.apache.spark.serializer.KryoSerializer"
            - name: SPARK_KARYO_BUFFER_MAX
              value: "64m"
            - name: SPARK_UI_ENABLED
              value: "true"
            - name: SPARK_UI_REVERSE_PROXY
              value: "true"
            - name: model_saved
              vlaue: {{ .Values.model.persistence.mountPath }}
            - name: DATA_DIR
              value: {{ .Values.dataConsumer.persistence.mountPath }}
          resources:
            requests:
              cpu: "500m"
              memory: "1.5Gi"
            limits:
              cpu: "1"
              memory: "2Gi"

          command: ["/bin/sh", "-c"]
          args:
            - "python /app/file_watcher.py"
          volumeMounts:
            - name: data-volume
              mountPath: {{ .Values.dataConsumer.persistence.mountPath }}
              readOnly: {{ .Values.dataConsumer.persistence.readOnly }}
            - name: model-volume
              mountPath: {{ .Values.model.persistence.mountPath }}
              readOnly: {{ .Values.model.persistence.readOnly }}
      
  volumeClaimTemplates:
    - metadata:
        name: data-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: model-volume
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
