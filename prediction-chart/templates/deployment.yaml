apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-prediction-app
  labels:
    app: my-prediction-app
spec:
  serviceName: my-prediction-app-headless 
  selector:
    matchLabels:
      app: my-prediction-app
  template:
    metadata:
      labels:
        app: my-prediction-app
    spec:
      serviceAccountName: spark
      containers:
        - name: my-prediction-app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Never
          ports:
            - containerPort: 4040
              name: spark-ui
            - containerPort: 7078
              name: spark-driver
            - containerPort: 5000
              name: flask-ui
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /
              port: 4040
            initialDelaySeconds: 20
            periodSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 4040
            initialDelaySeconds: 30
            periodSeconds: 10
          env:
            - name: PYSPARK_PYTHON
              value: /opt/venv/bin/python
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: JAVA_HOME
              value: "/opt/java/openjdk"
            - name: HADOOP_HOME
              value: "/opt/hadoop"
            - name: HADOOP_CONF_DIR
              value: "/opt/hadoop/etc/hadoop"
            - name: SPARK_HOME
              value: "/opt/spark"
            - name: SPARK_LOCAL_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: STARTUP_COMMAND
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: startup-command
            - name: MONGO_DB_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongodb.connectionUri.secretName }}
                  key: {{ .Values.mongodb.connectionUri.secretKey }}
           
            # Spark Core Configuration   
            - name: SPARK_DRIVER_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: SPARK_DRIVER_PORT
              value: "29413"           
            - name: SPARK_UI_PORT
              value: "4040"
            
            #cluster
            - name: SPARK_MASTER
              value: "local[2]"  
            - name: SPARK_APP_NAME
              value: "my-python-app"

            #k8s config
            - name: SPARK_K8S_IMAGE
              value: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            - name: SPARK_K8S_NAMESPACE
              value: "default"
            - name: SPARK_K8S_SERVICE_ACCOUNT
              value: "{{ .Values.serviceAccount.name }}"
            - name: SPARK_K8S_BATCH_DELAY
              value: "5s"
            
            # Resource Configuration
            - name: SPARK_EXECUTOR_MEMORY
              value: "14g"
            - name: SPARK_DRIVER_MEMORY
              value: "14g"
            - name: SPARK_MEMORY_FRACTION
              value: "0.75"
            - name: SPARK_STORAGE_FRACTION
              value: "0.3"
            
            #PERFORMANCE
            - name: SPARK_SHUFFLE_PARTITIONS
              value: "4"
            - name: SPARK_DEFAULT_PARALLELISM
              value: "4"
            #constants for model versoning  
           

            #serialization
            - name: SPARK_SERIALIZER
              value: "org.apache.spark.serializer.KryoSerializer"
            - name: SPARK_KARYO_BUFFER_MAX
              value: "512m"
            
            - name: SPARK_UI_ENABLED
              value: "true"
            - name: SPARK_UI_REVERSE_PROXY
              value: "true"
          
          resources:
            requests:
              cpu: "0"
              memory: "0Gi"
            limits:
              cpu: "0"
              memory: "0Gi"
          command: ["/bin/sh", "-c"]
          args:
            - "python /app/file_watcher.py"

          {{- if .Values.dataConsumer.persistence.enabled }}
          volumeMounts:
            - name: data-volume
              mountPath: {{ .Values.dataConsumer.persistence.mountPath }}
              readOnly: {{ .Values.dataConsumer.persistence.readOnly }}
          {{- end }}
          {{- if .Values.model.persistence.enabled }}
            - name: model-volume
              mountPath: {{ .Values.model.persistence.mountPath }}
              readOnly: {{ .Values.model.persistence.readOnly }}
          {{- end }}
            - name: prediction-storage
              mountPath: /data/

          volumes:
          {{- if .Values.dataConsumer.persistence.enabled }}
            - name: data-volume
              persistentVolumeClaim:
                claimName: {{ .Values.dataConsumer.persistence.existingClaim }}
          {{- end }}
          {{- if .Values.model.persistence.enabled }}
            - name: model-volume
              persistentVolumeClaim:
                claimName: {{ .Values.model.persistence.existingClaim }}
          {{- end }}
            - name: prediction-storage
              persistentVolumeClaim:
                claimName: predict-pvc